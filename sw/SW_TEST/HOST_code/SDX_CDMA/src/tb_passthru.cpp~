#include<stdio.h>
#include<math.h>
#include <errno.h>

#include <fcntl.h>
#include <sys/types.h>
#include <sys/mman.h>

#include <iostream>
#include <fstream>
#include <string>
#include <chrono>
#include <cmath>
#include "sdx_cppKernel_top.h" 
#include "pcie_memio.h" 
#include "srai_accel_utils.h" 
#define ZERO_f 1.0e-4
//#define ITERATION_SZ 1
//#define ITERATION_SZ 4096
//#define ITERATION_SZ 8192
#define ITERATION_SZ 16384
//#define ITERATION_SZ 32768
#define ONE_GIG (1024UL*1024UL*1024UL)

#define USE_UDMABUF

#define SHELL_VERSION 0x18101306


using namespace std;


int check_buf(unsigned char* buf, unsigned int size)
{
    int i;
    int error_count = 0;
    for(i = 0; i < size; i++) {
        buf[i] = (char)0xA5;
    }
    for(i = 0; i < size; i++) {
        if (buf[i] != (char)0xA5) {
         error_count++;
        }
    }
    return error_count;
}

void gen_test_data(srai_mem_conv_IN0 *a) {

    data_t temp[NUM_ELEMENTS_PER_SDX_DATA_BEAT];


    for (int j = 0 ; j < NUMBER_OF_DATA_SETS; j++) {
        for (int i = 0 ; i < SDX_CU_LOCAL_IN_SIZE; i++) {
            for (unsigned int index = 0; index < NUM_ELEMENTS_PER_SDX_DATA_BEAT;index++) {
                a->my_data_t[index] = (data_t((rand() % 32768)));
            }
            a++;
        }
    }
}

void print_test_data(srai_mem_conv_IN0 *a) {

printf("\n Input Test Data Set : \n");
for (int j = 0 ; j < NUMBER_OF_DATA_SETS; j++) {
    for (int i = 0 ; i < SDX_CU_LOCAL_IN_SIZE; i++) {
        for (unsigned int index = 0; index < NUM_ELEMENTS_PER_SDX_DATA_BEAT;index++) {
            printf ("\t%d|  \n", a->my_data_t[index]);
        }
        a++;
    }
}
printf ("\n");
printf ("-----------------------------------------------------\n");
}

int main(int argc, char** argv) {

  int            fd;
  char  attr[1024];
  unsigned int   buf_size;
  uint64_t phys_addr;
  uint64_t phys_addr_upper;
  unsigned long  debug_vma = 0;
  unsigned long  sync_mode = 2;
  uint32_t dbg_counter = 0;

  unsigned long int itrn = 0;
  int compute_itn_count;
  time_t t;
  srand((unsigned) time(&t));
  double high_res_elapsed_time = 0.0f;
  double high_res_elapsed_time_HW = 0.0f;
  double high_res_elapsed_time_SW = 0.0f;
  chrono::high_resolution_clock::time_point start_t;
  chrono::high_resolution_clock::time_point stop_t;
  chrono::duration<double> elapsed_hi_res;


  uint32_t dbg_ker_count = 0;
  sdx_data_t *a_in_ptr;
  char *a_in_ptr_c_POSIX = NULL;
  char *y_out_ptr_c_POSIX = NULL;
  srai_mem_conv_IN0 *a_in_ptr_c;
  srai_mem_conv_OUT0 *y_out_ptr_c;
  srai_mem_conv_IN0 *a_in_head_c;
  srai_mem_conv_OUT0 *y_out_head_c;
  sdx_data_t *y_out_ptr;

  int   fd_kmem;
  void* kmem_buf;
  unsigned char * kmem_buf_ptr;



  SysMon_temp_struct sys_temprature;
  deviceDNA_struct deviceDNA;
  bool RESULT_SUCESSFULL;
  kernel_execution_metric_struct kernel_execution_metric; 

  cout << "Srai_ DBG NUMBER_OF_DATA_SETS  =  " << NUMBER_OF_DATA_SETS << endl;
  cout << "Srai_ DBG GLOBAL_DATA_IN_SIZE  =  " << GLOBAL_DATA_IN_SIZE << endl;
  cout << "Srai_ DBG GLOBAL_DATA_OUT_SIZE =  " << GLOBAL_DATA_OUT_SIZE << endl;

  if ((GLOBAL_DATA_IN_SIZE_BYTES > ONE_GIG) | (GLOBAL_DATA_OUT_SIZE_BYTES > ONE_GIG)) {
    cout << "Memory reguirement over 1GB .......... exiting\n";
    exit (1);
  }

  posix_memalign((void **)&a_in_ptr_c_POSIX, 4096/*alignment*/, GLOBAL_DATA_IN_SIZE_BYTES + 4096);
  a_in_ptr_c = (srai_mem_conv_IN0 *)a_in_ptr_c_POSIX;
  posix_memalign((void **)&y_out_ptr_c_POSIX, 4096/*alignment*/, GLOBAL_DATA_OUT_SIZE_BYTES + 4096);
  y_out_ptr_c = (srai_mem_conv_OUT0 *)y_out_ptr_c_POSIX;

  a_in_head_c = a_in_ptr_c;
  y_out_head_c = y_out_ptr_c;

  printf("-------------------------------------------------------------\n");
  printf("Create Test Data Set\n");
  printf("Note DATA_IN_SIZE (Input Memory size in bytes  ) = %d (%llx)\n",(GLOBAL_DATA_IN_SIZE_BYTES),(GLOBAL_DATA_IN_SIZE_BYTES));
  printf("Note DATA_OUT_SIZE(Input Memory size in bytes  ) = %d (%llx)\n",(GLOBAL_DATA_OUT_SIZE_BYTES),(GLOBAL_DATA_OUT_SIZE_BYTES));
  cout << "Size of data_t = " << sizeof(data_t) <<  " Bytes" << endl;
  cout << "Number of Input Operands =  " << NUMBER_OF_DATA_SETS*SDX_CU_LOCAL_IN_SIZE*NUM_ELEMENTS_PER_SDX_DATA_BEAT<< endl;
  cout << "Number of Output Operands = " << NUMBER_OF_DATA_SETS*SDX_CU_LOCAL_OUT_SIZE*NUM_ELEMENTS_PER_SDX_DATA_BEAT<< endl;
  cout << "Size of srai_mem_conv_IN0 = " << sizeof(srai_mem_conv_IN0) <<  " Bytes" << endl;
  cout << "True Size (in Bytes) of Input Data  = " << sizeof(data_t)*NUMBER_OF_DATA_SETS*SDX_CU_LOCAL_IN_SIZE*NUM_ELEMENTS_PER_SDX_DATA_BEAT<< endl;
  cout << "Allocated Size (in Bytes) of a_in_ptr = " <<  GLOBAL_DATA_IN_SIZE_BYTES  << " | 0x"<< hex <<  GLOBAL_DATA_IN_SIZE_BYTES << endl;
  cout << dec;
  cout << "Allocated Size (in Bytes) of a_in_ptr_c = " << sizeof(srai_mem_conv_IN0)*NUMBER_OF_DATA_SETS*SDX_CU_LOCAL_IN_SIZE << " | 0x" << hex << sizeof(srai_mem_conv_IN0)*NUMBER_OF_DATA_SETS*SDX_CU_LOCAL_IN_SIZE << endl;
  cout << dec;
  printf("-------------------------------------------------------------\n\n\n");

    //Fill ddr4_Memory wr_data_buffer
    cout << "Initializing Memory with InputA args\n";
    gen_test_data(a_in_ptr_c);
    a_in_ptr = (sdx_data_t *)a_in_head_c;
    y_out_ptr = (sdx_data_t *)y_out_head_c;

    //print_gen_test_matrix(a_in_ptr_c);
    a_in_ptr_c = a_in_head_c;
    cout << "Memory Initialized with test Data\n";

// Compile for SRAI custom HLS accelerator platform 
    uint32_t PCI_BAR_base;
    stringstream PCI_BAR_base_str;
    string PR_binFile_name;

    if (argc != 3) {
        printf("usage: %s fpga_bin_file \n", argv[0]);
        return -1;
    }

    PCI_BAR_base_str << hex <<  argv[1]; 
    PR_binFile_name = argv[2];

    PCI_BAR_base_str >> PCI_BAR_base;

    
    cout << "Base Addr = 0x"  << hex << PCI_BAR_base << endl;

    cout << "Initializing FPGA\n";
    fpga_dev_mem *my_fpga_ptr = new fpga_dev_mem;
    my_fpga_ptr->fpga_dev_mem_init(PCI_BAR_base);

#ifdef USE_UDMABUF
    // __ udmabuf kernal mode driver needs to be installed 
    if ((fd  = open("/sys/class/udmabuf/udmabuf0/phys_addr", O_RDONLY)) != -1) {
      read(fd, attr, 1024);
      sscanf(attr, "%llx", &phys_addr);
      close(fd);
    }

    if ((fd  = open("/sys/class/udmabuf/udmabuf0/size"     , O_RDONLY)) != -1) {
      read(fd, attr, 1024);
      sscanf(attr, "%d", &buf_size);
      close(fd);
    }

    if ((fd  = open("/sys/class/udmabuf/udmabuf0/sync_mode", O_WRONLY)) != -1) {
      sprintf(attr, "%d", sync_mode);
      write(fd, attr, strlen(attr));
      close(fd);
    }

    if ((fd  = open("/sys/class/udmabuf/udmabuf0/debug_vma", O_WRONLY)) != -1) {
      sprintf(attr, "%d", debug_vma);
      write(fd, attr, strlen(attr));
      close(fd);
    }

    printf("phys_addr=0x%llx\n", phys_addr);
    printf("size=%d\n", buf_size);
    //check_buf_test((64*1024), 0, 0);
    if ((fd  = open("/sys/class/udmabuf/udmabuf0/sync_mode", O_WRONLY)) != -1) {
      sprintf(attr, "%d", sync_mode);
      write(fd, attr, strlen(attr));
      close(fd);
    }

    printf("sync_mode=%d, O_SYNC=%d, ", sync_mode, (O_SYNC)?1:0);

    if ((fd_kmem  = open("/dev/udmabuf0", O_RDWR | O_SYNC)) != -1) {
      kmem_buf = mmap(NULL, buf_size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
      kmem_buf_ptr = (unsigned char *)kmem_buf;
      printf ("SRAI__DBG :: Virtual Address = %llx\n", kmem_buf);
      //error_count = check_buf((unsigned char *)kmem_buf, size);
    }
    // __SRAI Initialize Kernel buffer (1MB worth)
    for (int i = 0; i < (2*1024*1024); i++) {
        kmem_buf_ptr[i] = (unsigned char)((rand() % 256));
//         if (i < (512*1024)) { 
//             kmem_buf_ptr[i] = (0x000000FF & i);
//         } else {
//             kmem_buf_ptr[i] = (0xA5);
//         }
    }
    // __ udmabuf kernal mode driver needs to be installed 
   printf("-------------------------------------------------------------\n\n\n");

#endif //USE_UDMABUF


    uint32_t curr_shell_version = fpga_report_SHELL_VER (my_fpga_ptr);
    //if ( curr_shell_version != SHELL_VERSION) {
    //    cout << "Shell Verion number does not match - Exiting \n\n";
    //    exit(1);
    //} else  {
        cout << "Shell Version Number = 0x" << hex << curr_shell_version << endl;
   // }
    cout << "EFUSE val = 0x" << hex << fpga_report_EFUSE_VAL (my_fpga_ptr) << endl;

    cout << dec << "Testing Shell BRAM 8K Memory \n";
    fpga_test_AXIL_LITE_8KSCRATCHPAD_BRAM (my_fpga_ptr);

    //DeIsolate before doing anyting on AXI Buses
    cout << "DeIsolate PR region \n";
    my_fpga_ptr->fpga_poke(AXI_LITE_GPIO_PR_ISOLATION, DEISOLATE_NORTH_PR); 
    cout << "Deassert SW reset to PR region PR region \n";
    deassert_CL_rst_all_n (my_fpga_ptr);

    fpga_read_temprature(my_fpga_ptr, &sys_temprature, 10);
    cout << "Current FPGA Die Temprature (deg C) =  " << sys_temprature.current_temp << endl;
    cout << "Current FPGA Max Die Temprature (deg C) =  " << sys_temprature.maximum_temp << endl;
    cout << "Current FPGA Min Die Temprature (deg C) =  " << sys_temprature.minimum_temp << endl;

    fpga_device_DNA (my_fpga_ptr, &deviceDNA);
    cout << "FPGA Device DNA reg A = 0x" << hex << deviceDNA.devDNA_A << endl;
    cout << "FPGA Device DNA reg B = 0x" << hex << deviceDNA.devDNA_B << endl;
    cout << "FPGA Device DNA reg C = 0x" << hex << deviceDNA.devDNA_C << endl;

    cout << "Start HLS execution " << endl;
    cout << " ............... Programing PR clock ------------------ " << endl;
    fpga_PROGRAM_PR_CLOCK (my_fpga_ptr, HW_Kernel_frequency);
    cout << " ....DONE ...... Programing PR clock ------------------ " << endl;

    /* Program Partial Bit file */
    cout << " ............... Programing PR Kernel  bitstream  ------------------ " << endl;
    fpga_PROGRAM_NORTH_PR(my_fpga_ptr, PR_binFile_name);
    ICAP_prog_NOOP (my_fpga_ptr);
    cout << " ............... Done Programing PR Kernel Bitstream ------------------ " << endl;

    cout << "Testing ROLE  BRAM 4K BRAM Memory \n";
    fpga_test_AXIL_LITE_4KSCRATCHPAD_BRAM_ROLE (my_fpga_ptr);

    fpga_device_DNA_ROLE (my_fpga_ptr, &deviceDNA);
    cout << "FPGA Device ROLE DNA reg A = 0x" << hex << deviceDNA.devDNA_A << endl;
    cout << "FPGA Device ROLE DNA reg B = 0x" << hex << deviceDNA.devDNA_B << endl;
    cout << "FPGA Device ROLE DNA reg C = 0x" << hex << deviceDNA.devDNA_C << endl;



#ifdef USE_UDMABUF
        phys_addr_upper = phys_addr + (uint64_t)(1024*1024);

// Throughput testing
    //SRAI_dbg_wait("Bandwidth test From Host to Card");
    cout << "\n\nTesting Host to Card Bandwidth .........\n";
    start_t = chrono::high_resolution_clock::now();
    for (itrn = 0; itrn < ITERATION_SZ; itrn++) {
        fpga_CDMA_XFER (my_fpga_ptr, phys_addr, (AXI_MM_DDR4_C1 + itrn*(2*1024*1024)), (2*1024*1024) );
    }
    stop_t = chrono::high_resolution_clock::now();
    elapsed_hi_res = stop_t - start_t ;
    high_res_elapsed_time = elapsed_hi_res.count();
    high_res_elapsed_time_HW = high_res_elapsed_time;
    cout << "Host Memory to Card DDR4 xfer  Execution time =  " <<  high_res_elapsed_time_HW << "s\n";
    cout << "Host Memory to Card DDR4 xfer  THroughput =  " <<  ((itrn*2*1024*1024)/high_res_elapsed_time_HW) << " Bytes/s   with " << dec  << (itrn*2*1024*1024) << " bytes\n";

    //SRAI_dbg_wait("Bandwidth test From Card to Host ");
    cout << "\n\nTesting Card to Host Bandwidth .........\n";
    start_t = chrono::high_resolution_clock::now();
    for (itrn = 0; itrn < ITERATION_SZ; itrn++) {
        fpga_CDMA_XFER (my_fpga_ptr, (AXI_MM_DDR4_C1 + itrn*(2*1024*1024)), phys_addr, (2*1024*1024) );
    }
    stop_t = chrono::high_resolution_clock::now();
    elapsed_hi_res = stop_t - start_t ;
    high_res_elapsed_time = elapsed_hi_res.count();
    high_res_elapsed_time_HW = high_res_elapsed_time;
    cout << "Card DDR4 xfer to Host Memory Execution time =  " <<  high_res_elapsed_time_HW << "s\n";
    cout << "Card DDR4 xfer to Host Memory THroughput =  " <<  ((itrn*2*1024*1024)/high_res_elapsed_time_HW) << " Bytes/s   with " << dec << (itrn*2*1024*1024) << " bytes\n\n\n";

    //SRAI_dbg_wait("CDMA From_Host");
    //cout << "Sleep ..." << endl;
    //usleep(10000000);
    //cout << "Wake ..." << endl;
    cout << " Initiating CDMA XFER From_host DDR (shell DDR4)----------- " << endl;
    // __SRAI Initialize Kernel buffer (1MB worth)
    for (int i = 0; i < (2*1024*1024); i++) {
        kmem_buf_ptr[i] = (unsigned char)((rand() % 256));
    }
    start_t = chrono::high_resolution_clock::now();
    fpga_CDMA_XFER (my_fpga_ptr, phys_addr, AXI_MM_DDR4_C1, (1024*1024) );
    //cout << "Sleep ..." << endl;
    //usleep(10000000);
    //cout << "Wake ..." << endl;
    //SRAI_dbg_wait("CDMA From_Host - 1");
    fpga_CDMA_XFER (my_fpga_ptr, AXI_MM_DDR4_C1, AXI_MM_DDR4_C0,  (1024*1024) );
//     cout << "Sleep ..." << endl;
//     usleep(10000);
//     cout << "Wake ..." << endl;
    fpga_CDMA_XFER (my_fpga_ptr, AXI_MM_DDR4_C0, AXI_MM_DDR4_C2,  (1024*1024) );
//     cout << "Sleep ..." << endl;
//     usleep(10000);
//     cout << "Wake ..." << endl;
    fpga_CDMA_XFER (my_fpga_ptr, AXI_MM_DDR4_C2, AXI_MM_DDR4_C3,  (1024*1024) );
//     cout << "Sleep ..." << endl;
//     usleep(10000);
//     cout << "Wake ..." << endl;
    //SRAI_dbg_wait("CDMA From_Host");
    fpga_CDMA_XFER (my_fpga_ptr, AXI_MM_DDR4_C3, phys_addr_upper, (1024*1024) );
//     cout << "Sleep ..." << endl;
//     usleep(10000);
//     cout << "Wake ..." << endl;
    // -     fpga_CDMA_XFER (my_fpga_ptr, phys_addr, phys_addr_upper, (1024*1024) );


    stop_t = chrono::high_resolution_clock::now();
    elapsed_hi_res = stop_t - start_t ;
    high_res_elapsed_time = elapsed_hi_res.count();
    high_res_elapsed_time_HW = high_res_elapsed_time;
    cout << "CDMA HOST -> 4x DDR4 -> Host xfer time =  " <<  high_res_elapsed_time_HW << "s\n";
    
    unsigned int val_error = 0;
    for (int i = 0; i < (1024*1024); i++) {
        if(kmem_buf_ptr[i] != kmem_buf_ptr[i + (1024*1024)]) {
            //cout << " At index = " << i <<"  Expected  " << hex << (unsigned int)kmem_buf_ptr[i] << " But Got  " << (unsigned int)kmem_buf_ptr[i + (1024*1024)] << endl;
            val_error++;
        }
    }

    cout << "Kernel buffer validation : No. of Errors = " << dec << val_error << endl;
    cout << "------------------------------------------------------------------------\n";

    // ------------ Clean -----------------------
    close(fd_kmem);
#endif //USE_UDMABUF

    // Software reset rst_main_n test
    dbg_counter = my_fpga_ptr->fpga_peek(AXI_LITE_ROLE_GPIO_MIG_CAL_STAT); 
    cout << "DBG_counter itn_1  before SW rst man_rst_n = " << dbg_counter << endl;
    dbg_counter = my_fpga_ptr->fpga_peek(AXI_LITE_ROLE_GPIO_MIG_CAL_STAT); 
    cout << "DBG_counter itn_2  before SW rst man_rst_n = " << dbg_counter << endl;
    cout << "Assert CL rst_n \n";
    assert_CL_rst_main_n (my_fpga_ptr);
    dbg_counter = my_fpga_ptr->fpga_peek(AXI_LITE_ROLE_GPIO_MIG_CAL_STAT); 
    cout << "DBG_counter itn_1  during SW rst man_rst_n = " << dbg_counter << endl;
    dbg_counter = my_fpga_ptr->fpga_peek(AXI_LITE_ROLE_GPIO_MIG_CAL_STAT); 
    cout << "DBG_counter itn_2  during SW rst man_rst_n = " << dbg_counter << endl;
    deassert_CL_rst_main_n (my_fpga_ptr);
    cout << "deassert CL rst_n \n";
    dbg_counter = my_fpga_ptr->fpga_peek(AXI_LITE_ROLE_GPIO_MIG_CAL_STAT); 
    cout << "DBG_counter itn_1  after SW rst man_rst_n = " << dbg_counter << endl;
    dbg_counter = my_fpga_ptr->fpga_peek(AXI_LITE_ROLE_GPIO_MIG_CAL_STAT); 
    cout << "DBG_counter itn_2  after SW rst man_rst_n = " << dbg_counter << endl;

    cout << "Entering DDR4_2 Selef_refresh" << endl;

    SR_CL_ddr2_sref_request (my_fpga_ptr);
    // ******************************
    // **** PR Etc here ***********
    // 
    //
    // *****************************


    SRAI_dbg_wait("Self Refresh Exit");
    cout << "Self Refresh Exit Cycle \n";
    assert_CL_rst_ddr2_n(my_fpga_ptr);
    SR_CL_ddr2_XSDB_mem_init_skip_assert (my_fpga_ptr);
    SR_CL_ddr2_XSDB_app_restore_en_assert (my_fpga_ptr);
    SR_CL_ddr2_XSDB_app_restore_complete_deassert (my_fpga_ptr);
    deassert_CL_rst_ddr2_n(my_fpga_ptr);
    SRAI_dbg_wait("Self Refresh Exit .... Waiting forinit_cal_complete");
    //SR_CL_ddr2_XSDB_request_assert (my_fpga_ptr);
    //SR_CL_ddr2_XSDB_write_GOLDEN (my_fpga_ptr);
    //SR_CL_ddr2_XSDB_app_restore_complete_assert (my_fpga_ptr);
    SRAI_dbg_wait("Self Refresh Exit .... All done");


    // *SR_CL_ddr2_XSDB_request_deassert (my_fpga_ptr);
    // *SR_CL_ddr2_XSDB_mem_init_skip_deassert (my_fpga_ptr);
    // *SR_CL_ddr2_XSDB_app_restore_en_deassert (my_fpga_ptr);



    fpga_clean(my_fpga_ptr);
    free(a_in_ptr_c_POSIX);
    free(y_out_ptr_c_POSIX);
    return 0;
}
